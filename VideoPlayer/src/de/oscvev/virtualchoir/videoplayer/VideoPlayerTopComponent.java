/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.oscvev.virtualchoir.videoplayer;

import de.oscvev.virtualchoir.core.VideoPathProvider;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.nio.file.Path;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.util.Utilities;
import uk.co.caprica.vlcj.BundledVLCLibsDiscoveryStrategy;
import uk.co.caprica.vlcj.factory.MediaPlayerFactory;
import uk.co.caprica.vlcj.factory.discovery.NativeDiscovery;
import uk.co.caprica.vlcj.media.MediaRef;
import uk.co.caprica.vlcj.media.TrackType;
import uk.co.caprica.vlcj.player.base.MediaPlayer;
import uk.co.caprica.vlcj.player.base.MediaPlayerEventListener;
import uk.co.caprica.vlcj.player.component.EmbeddedMediaPlayerComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//de.oscvev.virtualchoir.videoplayer//VideoPlayer//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "VideoPlayerTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "de.oscvev.virtualchoir.videoplayer.VideoPlayerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_VideoPlayerAction",
        preferredID = "VideoPlayerTopComponent"
)
public final class VideoPlayerTopComponent extends TopComponent implements LookupListener {

    private Lookup.Result<VideoPathProvider> resultVideoClips;
    private Path clipPath;
    private final EmbeddedMediaPlayerComponent mediaPlayerComponent;
    private final static String[] EMBEDDED_MEDIA_PLAYER_ARGS = {
        "--video-title=vlcj video output",
        "--no-snapshot-preview",
        "--quiet",
        "--intf=dummy"
    };

    public VideoPlayerTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(VideoPlayerTopComponent.class, "CTL_VideoPlayerTopComponent"));
        setToolTipText(NbBundle.getMessage(VideoPlayerTopComponent.class, "HINT_VideoPlayerTopComponent"));
        putClientProperty(TopComponent.PROP_CLOSING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_DRAGGING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_MAXIMIZATION_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_UNDOCKING_DISABLED, Boolean.TRUE);
        NativeDiscovery nd = new NativeDiscovery(new BundledVLCLibsDiscoveryStrategy());
        MediaPlayerFactory factory = new MediaPlayerFactory(nd, EMBEDDED_MEDIA_PLAYER_ARGS);
        mediaPlayerComponent = new EmbeddedMediaPlayerComponent(factory, null, null, null, null);
        videoPanel.add(mediaPlayerComponent, BorderLayout.CENTER);
        mediaPlayerComponent.setPreferredSize(new Dimension(100, 100));
        mediaPlayerComponent.setMinimumSize(new Dimension(100, 100));
        mediaPlayerComponent.mediaPlayer().events().addMediaPlayerEventListener(new MPEventListener());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        videoPanel = new javax.swing.JPanel();
        controlPanel = new javax.swing.JPanel();
        buttonsPanel = new javax.swing.JPanel();
        playButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        progressPanel = new javax.swing.JPanel();
        progressSlider = new javax.swing.JSlider();

        setLayout(new java.awt.BorderLayout());

        videoPanel.setPreferredSize(new java.awt.Dimension(100, 100));
        videoPanel.setLayout(new java.awt.BorderLayout());
        add(videoPanel, java.awt.BorderLayout.CENTER);

        controlPanel.setLayout(new java.awt.BorderLayout());

        org.openide.awt.Mnemonics.setLocalizedText(playButton, org.openide.util.NbBundle.getMessage(VideoPlayerTopComponent.class, "VideoPlayerTopComponent.playButton.text")); // NOI18N
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });
        buttonsPanel.add(playButton);

        org.openide.awt.Mnemonics.setLocalizedText(stopButton, org.openide.util.NbBundle.getMessage(VideoPlayerTopComponent.class, "VideoPlayerTopComponent.stopButton.text")); // NOI18N
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });
        buttonsPanel.add(stopButton);

        controlPanel.add(buttonsPanel, java.awt.BorderLayout.CENTER);

        progressPanel.setLayout(new java.awt.BorderLayout());

        progressSlider.setToolTipText(org.openide.util.NbBundle.getMessage(VideoPlayerTopComponent.class, "VideoPlayerTopComponent.progressSlider.toolTipText")); // NOI18N
        progressSlider.setValue(0);
        progressSlider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                progressSliderMouseDragged(evt);
            }
        });
        progressPanel.add(progressSlider, java.awt.BorderLayout.CENTER);

        controlPanel.add(progressPanel, java.awt.BorderLayout.PAGE_START);

        add(controlPanel, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    private boolean play = false;

    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
        if (play) {
            mediaPlayerComponent.mediaPlayer().controls().pause();
            org.openide.awt.Mnemonics.setLocalizedText(playButton, org.openide.util.NbBundle.getMessage(VideoPlayerTopComponent.class, "VideoPlayerTopComponent.playButton.text.play"));
            play = false;
        } else {
            mediaPlayerComponent.mediaPlayer().controls().play();
            org.openide.awt.Mnemonics.setLocalizedText(playButton, org.openide.util.NbBundle.getMessage(VideoPlayerTopComponent.class, "VideoPlayerTopComponent.playButton.text.pause"));
            play = true;
        }
    }//GEN-LAST:event_playButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        mediaPlayerComponent.mediaPlayer().controls().stop();
        org.openide.awt.Mnemonics.setLocalizedText(playButton, org.openide.util.NbBundle.getMessage(VideoPlayerTopComponent.class, "VideoPlayerTopComponent.playButton.text.play"));
        play = false;
        progressSlider.setValue(0);
    }//GEN-LAST:event_stopButtonActionPerformed

    private void progressSliderMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_progressSliderMouseDragged
        mediaPlayerComponent.mediaPlayer().controls().setPosition((float) (progressSlider.getValue() / 100.0));
        mediaPlayerComponent.mediaPlayer().events().addMediaEventListener(mediaPlayerComponent);
    }//GEN-LAST:event_progressSliderMouseDragged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonsPanel;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JButton playButton;
    private javax.swing.JPanel progressPanel;
    private javax.swing.JSlider progressSlider;
    private javax.swing.JButton stopButton;
    private javax.swing.JPanel videoPanel;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        Lookup.Template tpl = new Lookup.Template(VideoPathProvider.class);
        resultVideoClips = Utilities.actionsGlobalContext().lookup(tpl);
        resultVideoClips.addLookupListener(this);
    }

    @Override
    public void componentClosed() {
        resultVideoClips.removeLookupListener(this);
        resultVideoClips = null;
        mediaPlayerComponent.release();
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void resultChanged(LookupEvent le) {
        if (!resultVideoClips.allInstances().isEmpty()) {
            VideoPathProvider temp = resultVideoClips.allInstances().iterator().next();
            if (temp != null && temp.getVideoClipPath() != null) {
                clipPath = temp.getVideoClipPath();
                mediaPlayerComponent.mediaPlayer().controls().stop();
                mediaPlayerComponent.mediaPlayer().media().startPaused(clipPath.toString());
            }
        }
    }

    private class MPEventListener implements MediaPlayerEventListener {

        @Override
        public void mediaChanged(MediaPlayer mediaPlayer, MediaRef media) {
        }

        @Override
        public void opening(MediaPlayer mediaPlayer) {
        }

        @Override
        public void buffering(MediaPlayer mediaPlayer, float newCache) {
        }

        @Override
        public void playing(MediaPlayer mediaPlayer) {
        }

        @Override
        public void paused(MediaPlayer mediaPlayer) {
        }

        @Override
        public void stopped(MediaPlayer mediaPlayer) {
        }

        @Override
        public void forward(MediaPlayer mediaPlayer) {
        }

        @Override
        public void backward(MediaPlayer mediaPlayer) {
        }

        @Override
        public void finished(MediaPlayer mediaPlayer) {
        }

        @Override
        public void timeChanged(MediaPlayer mediaPlayer, long newTime) {
        }

        @Override
        public void positionChanged(MediaPlayer mediaPlayer, float newPosition) {
            progressSlider.setValue((int) (newPosition * 100.0));
        }

        @Override
        public void seekableChanged(MediaPlayer mediaPlayer, int newSeekable) {
        }

        @Override
        public void pausableChanged(MediaPlayer mediaPlayer, int newPausable) {
        }

        @Override
        public void titleChanged(MediaPlayer mediaPlayer, int newTitle) {
        }

        @Override
        public void snapshotTaken(MediaPlayer mediaPlayer, String filename) {
        }

        @Override
        public void lengthChanged(MediaPlayer mediaPlayer, long newLength) {
        }

        @Override
        public void videoOutput(MediaPlayer mediaPlayer, int newCount) {
        }

        @Override
        public void scrambledChanged(MediaPlayer mediaPlayer, int newScrambled) {
        }

        @Override
        public void elementaryStreamAdded(MediaPlayer mediaPlayer, TrackType type, int id) {
        }

        @Override
        public void elementaryStreamDeleted(MediaPlayer mediaPlayer, TrackType type, int id) {
        }

        @Override
        public void elementaryStreamSelected(MediaPlayer mediaPlayer, TrackType type, int id) {
        }

        @Override
        public void corked(MediaPlayer mediaPlayer, boolean corked) {
        }

        @Override
        public void muted(MediaPlayer mediaPlayer, boolean muted) {
        }

        @Override
        public void volumeChanged(MediaPlayer mediaPlayer, float volume) {
        }

        @Override
        public void audioDeviceChanged(MediaPlayer mediaPlayer, String audioDevice) {
        }

        @Override
        public void chapterChanged(MediaPlayer mediaPlayer, int newChapter) {
        }

        @Override
        public void error(MediaPlayer mediaPlayer) {
        }

        @Override
        public void mediaPlayerReady(MediaPlayer mediaPlayer) {
        }

    }
}
